import os
import json
import asyncio
import logging
import random
import aiohttp
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('key.env')

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_URL = os.getenv("API_URL")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
THREAD_ID = os.getenv("THREAD_ID")

PROCESSED_IDS_FILE = "processed_ids.json"

# ---
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
# ---
def load_processed_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ID –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(PROCESSED_IDS_FILE):
        try:
            with open(PROCESSED_IDS_FILE, "r") as file:
                return set(json.load(file))
        except (IOError, json.JSONDecodeError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ processed_ids.json: {e}")
            return set()
    return set()

def save_processed_ids(processed_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ID –≤ —Ñ–∞–π–ª."""
    try:
        with open(PROCESSED_IDS_FILE, "w") as file:
            json.dump(list(processed_ids), file, indent=4)
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ processed_ids.json: {e}")

processed_ids = load_processed_ids()

# ---
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
# ---
async def send_to_telegram(session, message, thread_id=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    if thread_id:
        payload["message_thread_id"] = thread_id

    try:
        async with session.post(url, json=payload, timeout=10) as response:
            if response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}, –æ—Ç–≤–µ—Ç: {await response.text()}")
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except aiohttp.ClientError as e:
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.")

async def fetch_requests(session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ ManageEngine."""
    headers = {"TECHNICIAN_KEY": API_KEY}
    try:
        async with session.get(API_URL, headers=headers, ssl=False, timeout=10) as response:
            response.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx
            data = await response.json()
            return data.get("requests", [])
    except aiohttp.ClientResponseError as e:
        logging.error(f"HTTP-–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e.status} - {e.message}")
    except aiohttp.ClientError as e:
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")
    return []

# ---
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ---
async def process_requests():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫."""
    while True:
        async with aiohttp.ClientSession() as session:
            all_requests = await fetch_requests(session)
            
            new_requests = []
            for request in all_requests:
                id_task = str(request.get("id")) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID ‚Äî —Å—Ç—Ä–æ–∫–∞
                if id_task not in processed_ids:
                    processed_ids.add(id_task)
                    new_requests.append(request)
            
            if new_requests:
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_requests)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
                for request in new_requests:
                    id_task = str(request.get("id"))
                    title = request.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
                    requester = request.get("requester", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    link = f"https://192.168.110.13:8080/WorkOrder.do?woMode=viewWO&woID={ id_task }"
                    
                    message = (
                        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n"
                        f"üî¢ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <a href='{link}'>{id_task}</a>\n"
                        f"üìå <b>–¢–µ–º–∞:</b> {title}\n"
                        f"üë§ <b>–ù–∞–ø–∏—Å–∞–ª:</b> {requester}"
                    )
                    await send_to_telegram(session, message, thread_id=THREAD_ID)

            save_processed_ids(processed_ids)
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å '—Å—Ç–∞–∏' –∑–∞–ø—Ä–æ—Å–æ–≤
        sleep_duration = 60 + random.randint(1, 15)
        logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {sleep_duration} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(sleep_duration)

# ---
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
# ---
if __name__ == "__main__":
    try:
        asyncio.run(process_requests())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
